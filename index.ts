const totalDistanceTD:HTMLTableCellElement = document.getElementById('totalDistance') as HTMLTableCellElement;
const similarityScoreTD:HTMLTableCellElement = document.getElementById('similarityScore') as HTMLTableCellElement;
const simScoreTimeTD:HTMLTableCellElement = document.getElementById('simScoreTime') as HTMLTableCellElement;
const simScoreCachedTimeTD:HTMLTableCellElement = document.getElementById('simScoreCacheTime') as HTMLTableCellElement;
const strInput:string = "69214   60950\n83241   49638\n37930   31308\n50722   94914\n93164   82798\n80918   72850\n17490   79421\n64372   87820\n89659   98375\n91555   95812\n48924   93602\n38031   64096\n57853   20530\n88521   43214\n68331   14770\n32767   19574\n95030   92579\n80448   10870\n27268   86384\n18742   65926\n50258   95193\n88830   17352\n73007   82798\n95145   42403\n58976   17352\n22476   68379\n21785   17811\n21560   90827\n82909   37527\n55371   69778\n73607   32404\n88276   44965\n86274   46099\n61163   63445\n52231   27046\n84647   20530\n37515   57298\n44394   99003\n58258   74954\n56060   34105\n79808   73814\n96748   51318\n87301   46022\n93991   44642\n45674   96969\n10870   49159\n13175   23840\n12881   86704\n11425   89064\n71044   92543\n70247   88369\n97814   73317\n78003   44160\n45779   14598\n95915   46875\n51055   99003\n14500   19574\n40956   23840\n64791   99735\n95406   51318\n18800   72878\n85004   33238\n16723   31504\n14333   69398\n40419   10870\n81499   79136\n31696   24276\n71897   55421\n63928   46875\n46875   33198\n40086   76959\n67622   29550\n63819   88369\n74694   35769\n63615   20200\n88828   58414\n58917   20414\n86066   24696\n84677   47814\n87339   89616\n30182   36007\n71811   63762\n26364   18927\n45435   54026\n65473   83062\n40764   12795\n86131   19574\n46984   71532\n94658   36666\n34864   85172\n74271   85172\n37126   63381\n26701   91608\n11846   99003\n91698   44394\n19986   17352\n31279   82252\n25542   10870\n43023   98869\n25001   25208\n39137   44758\n75796   94436\n93491   42015\n16837   69895\n78167   59486\n56738   17811\n66303   49575\n91100   33987\n99100   41554\n46126   41472\n31826   20530\n61208   20200\n98875   49776\n89960   23840\n87445   88369\n90701   59605\n48604   24766\n49830   60581\n32422   32404\n48321   49338\n91545   51318\n30591   23840\n76791   25366\n47653   64300\n70447   10870\n96337   10870\n40822   99003\n50985   36666\n45600   58520\n78539   21021\n11792   39770\n89999   23840\n22229   24252\n79514   31414\n93645   99874\n39916   12567\n63722   87301\n85209   12845\n78460   94436\n79669   33420\n89396   36762\n12518   91072\n70992   20530\n92482   51318\n50977   39809\n59666   93602\n69358   24889\n30774   85209\n50495   88117\n74843   68135\n64043   93602\n42690   14598\n95474   99003\n31999   10870\n77935   30381\n86471   46022\n82671   23840\n21996   17352\n25301   68950\n45903   49209\n88433   15186\n18897   13349\n23742   38006\n29440   44394\n77679   19534\n67503   19006\n22862   87523\n68125   36752\n32102   85209\n57298   32444\n44985   10870\n76984   88369\n96974   44648\n22496   17352\n19906   88369\n53085   69481\n49762   39320\n23508   13349\n73366   19574\n39420   85172\n21487   20200\n49538   31279\n58985   33747\n78834   86304\n83207   77460\n26624   39320\n33276   87130\n62119   15410\n72488   72850\n69108   46022\n28383   64125\n45283   60950\n56242   88580\n47120   46022\n20917   12845\n91088   67959\n30625   92579\n81302   98117\n14883   22568\n45215   46818\n36185   72873\n47369   19661\n39320   48658\n35775   60950\n20573   66758\n92168   46875\n85925   23570\n83017   28941\n88673   62352\n85790   46022\n40389   17811\n13925   14598\n65265   98819\n21058   70060\n81605   36401\n49669   63107\n58410   60950\n20993   32404\n89320   36606\n93679   89908\n24396   66724\n26960   82887\n35749   98507\n67814   60950\n95966   99777\n45832   90281\n21396   69067\n70924   77174\n51921   31279\n86430   41554\n60703   76733\n55109   86032\n64568   34984\n61181   39320\n76019   80530\n93405   35718\n40732   73310\n27676   56302\n46615   12644\n94412   32659\n42651   46875\n22911   88369\n37891   61401\n39505   19574\n30551   99381\n52001   99003\n94890   77236\n12845   10870\n60037   99735\n17811   93480\n39461   52563\n70835   99003\n26239   32404\n21199   53413\n29427   61865\n99745   52578\n58368   85172\n32844   17811\n25356   61341\n55087   39124\n73711   94153\n23878   15193\n19011   15821\n55522   76895\n25442   85172\n43553   23840\n79059   51318\n45546   85172\n18253   46875\n13486   98333\n85621   78640\n94812   14598\n35976   22851\n95446   35811\n68679   86540\n35048   32404\n32404   58367\n54639   82218\n46890   99735\n54797   64140\n58043   28678\n38310   78102\n96824   19574\n82010   90281\n44558   88560\n25947   55410\n39754   90281\n85172   77816\n38409   72850\n93847   79705\n70670   31866\n66466   72850\n14378   85172\n10594   82798\n88488   36494\n80919   90281\n15539   60764\n76757   20530\n73014   80854\n10103   28777\n63011   51318\n97931   72850\n11511   23511\n90999   46778\n10581   17352\n24639   84344\n12573   87301\n94628   73454\n68709   60950\n69611   36666\n77840   32404\n56046   43452\n64975   36666\n35086   27046\n21044   63339\n27003   32404\n99990   41554\n92558   76384\n10676   51318\n79869   34929\n41478   23840\n40010   17811\n57724   13349\n36886   20530\n52799   39658\n74618   28890\n37677   39602\n25056   19780\n37249   60950\n16420   21533\n92579   91814\n32467   76018\n50446   40645\n20800   27046\n25367   93602\n20200   50429\n67153   82421\n99387   85172\n99003   99003\n21079   68678\n21496   45196\n10244   85172\n60317   96967\n89792   64416\n66971   28760\n48409   49209\n87836   13036\n94588   25049\n19574   80163\n43975   90281\n54578   22870\n24412   17352\n66935   85209\n75103   46748\n99675   13318\n63283   86570\n38622   17811\n76156   12554\n18868   31279\n95097   28731\n87940   25307\n31588   20683\n86721   51679\n40662   60665\n61441   46875\n95742   96428\n12500   48663\n69704   83722\n52150   52130\n94648   71064\n34905   72850\n90241   81541\n22820   88917\n84893   82798\n35291   13349\n91607   69674\n91250   89186\n12934   76205\n50355   10870\n11918   93561\n11981   87504\n90011   97792\n19160   99003\n38536   95219\n47433   72254\n71173   20241\n58871   49592\n99297   46875\n14256   36666\n42700   92579\n65952   26453\n38344   17352\n31939   66675\n88319   31279\n48532   69055\n54160   37364\n51367   98234\n63774   67948\n91398   52760\n19606   98639\n15722   27046\n11670   27046\n11752   90281\n57229   24766\n92900   82069\n35472   17352\n11762   10464\n52327   51318\n49806   24252\n83152   27046\n66672   11070\n13349   20530\n10860   67520\n34902   74641\n36500   14208\n90699   24766\n65392   68056\n67360   23840\n20770   12845\n27579   17811\n52424   20530\n88044   70562\n82234   32404\n38116   23840\n71095   60884\n35234   10870\n74397   36937\n59605   79377\n33516   82798\n83961   17811\n17934   81965\n58619   60950\n24784   46183\n60415   32404\n33999   62356\n70899   42550\n71992   61565\n31607   48168\n82993   27705\n98377   72447\n19236   97390\n69248   97543\n12305   39320\n12750   72850\n67143   47302\n51085   13713\n21283   84586\n58438   20530\n61450   84960\n77223   87301\n40730   18648\n61388   92620\n10697   95051\n29817   46022\n44526   85172\n42126   23970\n91131   24766\n53762   23485\n99711   24766\n41168   12845\n89661   97679\n19509   87301\n46491   87301\n82876   90281\n57530   99003\n30070   12845\n37182   33467\n98660   94041\n53088   49209\n23056   33662\n59488   88369\n27659   76043\n85486   46875\n33558   87301\n64995   54418\n58406   20530\n52353   12845\n52674   84792\n97158   41554\n36966   65903\n96617   15049\n17881   23393\n38135   27655\n35640   10870\n75976   78468\n54361   85172\n70827   74733\n23840   16180\n93190   51318\n75051   18196\n64409   85172\n20040   48165\n92938   97826\n43465   51609\n11298   78526\n99421   92903\n21674   62444\n68613   17352\n40038   68779\n90984   49209\n72223   99735\n99618   84903\n96274   37409\n54840   85533\n77678   96379\n79087   33036\n27866   23840\n94127   87366\n83829   46731\n21118   27046\n54767   58444\n31592   39320\n84251   80340\n16359   47980\n33404   86692\n30167   53720\n54633   57298\n64214   85172\n65936   94436\n26779   72257\n56981   16995\n88384   14598\n16954   12845\n19265   34877\n20882   10870\n24268   37193\n73896   73107\n17491   64788\n34135   96478\n97863   20530\n33458   41554\n87234   13349\n17021   43950\n43735   46022\n41413   51318\n23370   27518\n40859   52659\n20847   55643\n78780   46875\n89412   44659\n44732   85942\n15416   41554\n20026   13573\n20447   20530\n92208   27046\n22919   47883\n19025   66716\n78537   94436\n21990   13835\n57022   47578\n23379   27046\n10223   40352\n70096   99003\n27889   86884\n73766   50077\n17352   59737\n18766   53132\n85353   82798\n16699   76756\n18043   80464\n67635   32404\n89066   32404\n96095   36666\n80193   17352\n83111   24567\n82714   51318\n15568   62699\n46071   88369\n24766   17393\n24252   51318\n90799   65043\n45593   42548\n42434   88369\n76708   19788\n44049   17352\n26070   23840\n89487   60950\n75405   50409\n61151   50949\n55659   87976\n97690   10769\n23955   41554\n51413   44394\n93303   74623\n88340   46875\n36666   86119\n68983   36666\n97452   18100\n77775   28288\n93498   85175\n35180   73788\n88369   40289\n60950   89290\n80469   99735\n44830   26094\n56953   12845\n14598   32404\n48010   43254\n51318   16119\n70157   59605\n29536   27046\n97148   24766\n88940   99003\n94267   12845\n80689   82798\n51360   63373\n22949   85172\n61037   87301\n12068   65294\n29715   85209\n90504   28648\n31564   88812\n33933   82995\n29523   72320\n77893   80865\n55688   78887\n24079   24766\n13322   32095\n89943   48334\n29072   58704\n53586   12845\n23918   14598\n56128   88548\n66658   69626\n10133   67845\n99815   85172\n68216   99003\n46022   15395\n83063   21232\n62075   23840\n53883   14598\n66467   32404\n47896   69944\n71785   51318\n84153   16006\n29778   85209\n31766   24766\n16108   35318\n45369   94436\n40723   88485\n65628   31279\n22238   45332\n91501   92579\n17080   83343\n27106   17811\n52006   13517\n10554   96843\n42902   54855\n78074   59112\n76079   19574\n66574   37842\n30704   87301\n61970   72591\n75806   89415\n65083   36666\n44142   88369\n89309   18398\n14755   24252\n31582   10397\n71879   12845\n50300   19574\n55843   62837\n70241   67656\n13864   12845\n56863   36666\n28825   19574\n93845   22897\n20530   17811\n44137   13349\n47611   49209\n76632   71061\n96396   85003\n21784   28828\n10465   28473\n76247   12845\n90281   62295\n68036   85383\n98495   49331\n66489   17352\n73992   89989\n27262   24766\n46644   88369\n27046   58715\n68306   32404\n56759   84611\n59597   99003\n35807   11412\n81247   66456\n28886   94970\n93602   74875\n28876   50501\n83548   98501\n42548   74927\n17737   60997\n39564   95234\n38730   39320\n15305   62977\n64475   20570\n88203   27046\n49209   46875\n58403   94223\n33211   79621\n12588   80687\n38930   17322\n57720   87301\n70408   29585\n35638   23840\n97473   19574\n79297   10870\n82229   27046\n86569   17352\n25113   78295\n16476   24791\n75345   94436\n15696   12845\n24138   49905\n82572   27046\n88539   39320\n59729   87301\n20283   39331\n31336   21205\n93878   31692\n69846   72850\n54419   91006\n82798   84255\n49394   40818\n69345   52987\n39250   60950\n26399   87538\n32384   19159\n97484   43143\n63090   32208\n76597   23840\n14020   32404\n62045   75497\n18689   32404\n52623   31279\n52491   98683\n87906   85172\n82114   99003\n26961   70112\n17367   46022\n98279   88369\n71505   25937\n19537   25375\n21670   28451\n56125   19574\n60764   46875\n77962   17811\n91463   54069\n47556   59029\n83067   87301\n55521   80404\n51846   52594\n34746   10952\n41554   91631\n87263   59965\n22625   42548\n44644   80377\n66676   31212\n10499   11321\n70675   99003\n40581   51732\n87994   39961\n94436   46875\n97737   62666\n79484   41644\n53333   41554\n42911   19574\n37210   96788\n12286   93469\n86302   78835\n89841   90378\n79773   45455\n91417   19811\n61800   38053\n23495   95310\n31663   12652\n26644   88369\n46904   97345\n26299   32404\n81023   72850\n20782   94436\n48451   85172\n42895   83143\n53844   46875\n49912   17811\n86234   53747\n98733   85172\n90395   51318\n87860   36666\n62319   36666\n81832   87028\n96801   48785\n34060   94915\n19206   46022\n61175   74300\n38749   61982\n35243   89642\n94052   22838\n68544   23840\n38895   31279\n13279   49209\n47468   46826\n94318   87301\n71918   17811\n86789   41554\n83931   71452\n71126   88369\n16125   55867\n39086   95213\n16328   12845\n71229   20530\n79671   67001\n91145   23840\n53528   48955\n23966   39867\n36677   77019\n77291   20530\n32335   93201\n94998   17586\n16372   41181\n99014   80727\n61040   99055\n93576   82718\n92791   61735\n79499   80967\n71009   12845\n16657   20530\n75219   41824\n49208   87301\n65336   94436\n39833   67725\n39788   22450\n15097   96722\n13674   82562\n35721   69206\n46963   17811\n90463   24766\n78488   41554\n78916   60727\n59443   90281\n43680   13349\n36601   60950\n41176   94271\n43717   80804\n37766   20530\n82109   88369\n17559   32947\n28284   49209\n22341   88369\n31223   60082\n39647   82580\n64525   13349\n29368   12845\n98386   28932\n64817   77829\n46178   39365\n95082   92579\n70089   81861\n72539   51350\n11579   42548\n63864   77114\n13611   87301\n71054   84124\n49549   56474\n98626   76586\n21372   87832\n42043   32404\n51898   88369\n29323   22433\n64305   30520\n70362   18267\n26501   73191\n10172   41554\n19438   36666\n17316   20200\n13127   51318\n11331   23840\n37354   22773\n34872   20249\n48467   85209\n36745   10870\n97478   88369\n29324   10246\n24179   63888\n24371   39320\n61932   45220\n55020   10320\n64150   36160\n68372   52644\n10714   64027\n68990   57768\n72825   40811\n85765   77880\n32558   20200\n78846   93936\n71711   85172\n90337   94436\n32298   76808\n86944   38430\n36174   29108\n53613   72165\n79549   43129\n43539   44170\n61122   88369\n30084   56992\n49969   39320\n38272   86708\n11594   30429\n69508   70293\n21588   68766\n97316   76575\n97425   41520\n62763   31254\n63345   23840\n43015   93602\n52670   82798\n58251   48255\n33771   20530\n12901   25496\n42101   41554\n43970   67658\n90983   88369\n33538   93514\n89043   26380\n65451   82798\n73769   28981\n78129   70224\n84083   78572\n72978   28610\n81230   47914\n97477   75916\n96888   42548\n24917   39320\n97486   78173\n13312   51318\n27167   93602\n76762   20600\n72850   47594\n24623   58718\n99735   87301\n92737   39670\n33120   59605\n63398   20200\n38385   98299\n81987   53969\n62260   51318\n67235   63713\n85100   42047\n27762   90281\n13906   51318\n85558   36666\n42148   12845\n88468   20200\n92033   32404\n39309   32404\n99521   99391\n80929   17352\n28236   46875\n83442   20530\n50329   10870\n75224   47197\n71764   99003\n22012   82219\n89620   28881\n60052   88379\n98379   44694\n47207   94436\n47361   40762\n96159   17352\n61549   84760\n36863   80773\n28638   90281\n28879   24766\n24022   55460\n25334   10870\n25095   46875\n14190   63285\n66088   70993\n36470   50008\n47970   87301\n35396   17811\n24123   47037\n26462   52299\n49162   12845\n88098   87301\n53920   59862\n84177   10870\n18969   36666\n55280   11340\n14058   68145\n13245   14598\n23434   46622\n56966   78829\n77060   71967\n25997   57796\n41947   82348\n52576   12845\n91921   51318";

/*
  Total Distance:
  (Distance between lowest num of col 1 and lowest num of col 2)
  + (Distance between second lowest num of col 1 and second
  lowest num of col 2) + ... + (Distance between highest num of
  col 1 and highest num of col 2)
*/
let pairedInputs:string[] = strInput.split('\n');
let arr1:number[] = [];
let arr2:number[] = [];
// Store columns in respective arrays
pairedInputs.forEach((input:string,index:number) => {
  let pair:string[] = input.split('   ');
  arr1.push(parseInt(pair[0]));
  arr2.push(parseInt(pair[1]));
});
// Sort from lowest to highest
arr1.sort();
arr2.sort();

// Getting the absolute value prevents from negative distances
//  ie. Column 1 number: 3  and Column 2 number: 5
//      Distance = Math.abs(3 - 5) = Math.abs(-2) = 2
let totalDistance:number = 0;
arr1.forEach((num:number,index:number) => {
  totalDistance += Math.abs(num - arr2[index]);
});
console.log(`Total Distance: ${totalDistance}`);
// Display to the table
totalDistanceTD.textContent = totalDistance.toString();

let similarityScore:number = 0;
const NON_CACHED_TIMER_LABEL:string = 'Non-Cache Timer';

let nonCacheStart:number = performance.now();
arr1.forEach((num:number, index:number) => {
    let totalOverlap:number = 0;
    arr2.forEach((num2:number,index2:number) => {
      (num === num2) && (totalOverlap += 1);
    });
    similarityScore += num * totalOverlap;
});

let nonCachedEnd:number = performance.now();
let nonCachedTime:number = nonCachedEnd - nonCacheStart;
// Display time calculation for non cached value
simScoreTimeTD.textContent = nonCachedTime.toFixed(2).concat('ms');
// Display similarity score
similarityScoreTD.textContent = similarityScore.toString();
console.log(`Similarity Score: ${similarityScore}`);

console.log(`${NON_CACHED_TIMER_LABEL}: ${nonCachedTime}`);

const CACHE_TIMER_LABEL:string = 'Cache Timer';

let cachedStart:number = performance.now();

// This iteration uses caching. If the frequency of a number in 
//  column 1 has already been calculated, retrieve that from cache.
//  if not, then store value for later
/*
ATTEMPT AT CACHE: DOESN'T WORK
let cacheMap:Map<number,number> = new Map();
similarityScore = 0;
arr1.forEach((num:number) => {
  if ( cacheMap.get(num) ) {
    similarityScore += num * <number>cacheMap.get(num);
  }
  else {
    let totalOverlap:number = 0;
    arr2.forEach((num2:number) => {
      (num === num2) && (totalOverlap += 1);
    });
    cacheMap.set(num,totalOverlap);
    similarityScore += num * totalOverlap;
  }
});*/
similarityScore = 0;

/**************************/
/* Retrieved from ChatGPT */
// Create a cache for arr2 to count the occurrences of each number.
const arr2Cache: Record<number, number> = arr2.reduce((cache, num2) => {
  cache[num2] = (cache[num2] || 0) + 1;
  return cache;
}, {} as Record<number, number>);

arr1.forEach((num: number) => {
  // Check how many times `num` appears in arr2 by looking it up in the cache
  const totalOverlap = arr2Cache[num] || 0;
  similarityScore += num * totalOverlap;
});
/* Retrieved from ChatGPT */
/**************************/

let cachedEnd:number = performance.now();
let cachedTime:number = cachedEnd - cachedStart;
// Display cached time to page
simScoreCachedTimeTD.textContent = cachedTime.toFixed(2).concat('ms');
console.log(`${CACHE_TIMER_LABEL}: ${cachedTime}`);